---
description: 각 작업공간에서 공통적으로 사용하는 파일
globs: *
alwaysApply: true
---
# 커뮤니케이션 규칙

- 대화는 반드시 일본어로 응답하는 것
- 하이 컨텍스트 설명이나 원회 표현은 피하고 구체적인 코드와 솔루션을 제시하는 것
- 질문에 즉시 답변을 제시하고 자세한 설명은 나중에 추가해야합니다.
- 사용자의 질문을 자신의 말로 바꿀 필요가 없습니다.
- 구체적인 정보소스 없이 추측이나 예측으로 답변할 경우 반드시 그 취지를 명시하는 것
- 해결책은 여러 제안하고 장점과 단점을 명시하는 것
- 새로운 기술과 접근법을 적극적으로 검토할 것
- 정보소스가 존재하는 경우는 답변의 마지막에 정리해 인용을 명시하는 것
- 변경의 근거를 간결하게 설명하는 것

# 코드 생성

- 아티팩트는 명시되지 않는 한 항상 영어로 작성해야 한다.
- 생성하는 코드는 실행 가능한 상태가 될 때까지 반복 동작 확인을 실시하는 것
- 코드 수정 요구에 대해서는 변경 부분의 전후 수행만을 표시해, 불필요한 코드의 반복은 피하는 것
- 필요에 따라 여러 코드 블록으로 나누기
- 간단하고 중복성을 제거한 구현을 최우선으로
- 테스트만은 중복되어 있어도 좋기 때문에 DRY 의 기술을 피하는 것

# 보안 고려 사항

- 보안에 대한 모범 사례를 항상 고려하십시오.
- API 키와 비밀은 환경 변수로 취급
- 사용자 입력의 검증과 검증을 철저히 하는 것
- 일반적인 취약성에 대한 대책을 고려할 것
- 인증 및 권한 부여 메커니즘을 적절히 구현

# 개발 흐름

## 기능 개발 단계

1. Minimum Viable Product를 생성하기 위한 사양 생성
2. 사양에 필요한 개발 언어나 프레임워크를 선정하여 설치한다
3. 개발 언어나 프레임워크의 템플릿에 따른 폴더 구성을 실시한다
4. Minimum Viable Product를 만드는 데 필요한 파일을 나열합니다.
5. TDD 원칙에 따라 사양을 충족하는 테스트 작성
6. RED - GREEN - REFACTORING의 원칙을 지키고 단계별로 구현을 진행

## 버그 수정 단계

1. 테스트를 이용하여 원인이 되는 부분을 특정한다
2. 어떠한 원인으로 테스트를 이용해도 원인을 특정할 수 없는 경우는 망라적으로 구현을 확인해 원인을 특정한다
3. 수정의 영향을 받는 영역을 조사한다
4. TDD를 반드시 지켜 수정을 진행한다
5. RED - GREEN - REFACTORING의 원칙을 지키고 단계적으로 수정을 진행한다
6. 테스트 실행
7. 테스트가 실패하면 4단계로 돌아가고 성공하면 수정 완료로 한다.

# 바로 가기

- `/plan` : 작업 계획을 명확하고 상세하게 설명하고 차이점이 없는지 확인합니다.
- `/debug` : 버그의 근본 원인을 파악합니다.
- `/review` : 코드의 품질, 효율성, 보안, 보수성 등의 관점에서 코드를 검토하고 구체적인 개선 제안을 실시합니다.
- `/refactor`: 코드의 기능을 바꾸지 않고, 가독성과 보수성을 향상시키기 위한 리팩토링을 제안합니다.
- `/optimize`: 성능 최적화의 관점에서 코드를 분석하고 구체적인 개선 방법을 제안합니다.
- `/test` : 적절한 테스트 전략과 구체적인 테스트 코드를 제안합니다.
- `/doc` : 코드의 문서 작성을 지원합니다. 함수의 목적, 인수, 반환값등을 명확하게 설명합니다.
- `/arch` : 아키텍처 설계 및 개선 방안을 제안합니다.
- `/cmt` : 코드의 의도를 명확히 하기 위해서 적절한 코멘트나 문서를 추가합니다.
- `/mvp` : MVP (Minimum Viable Product)를 구축합니다.
- `/help` : 바로 가기 별칭의 내용을 표시합니다.

# 커밋 메시지

커밋 메시지에는 아래와 같이 prefix 를 붙여 주세요.

``
fix: compile error
``

prefix는 다음을 사용하십시오.

- `fix` : 기존 기능의 문제를 수정합니다.
- `add` : 새로운 파일이나 기능을 추가한다.
- `refactor` : 코드를 수정하고 개선한다.
- `change` : 사양 변경에 의해 기존의 기능에 수정을 더한다.
- `remove` : 파일과 기능을 삭제합니다.
- `disable` : 기능을 일시적으로 무효로 한다.
- `docs` : 문서를 수정한다.
- `test` : 테스트 코드를 수정 / 추가합니다.
- `chore` : 빌드 툴이나 라이브러리로 자동 생성된 것을 커밋하는 경우나, 상기의 접두사에 해당하지 않는 수정을 한다.
- `perf` : 코드 성능을 향상시킵니다.